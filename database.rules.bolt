path /config is Config;
path /users/{uid} is User;
path /orders/{uid} is Order;

type Config {
  read() { isAuthenticated() }
}

type User {
  read() { isCurrentUser(key()) }
  importedOrders: Order[];
  orders: Order[];
  profile: Profile;
  roles: UserRoles;
}

type Order {
  write() { isCurrentUser(key()) }
  // validate() { false } // this might break validating children
  flavors: Object;
  drink: String;
  temperature: Temperature;
}

type Profile {
  // validate() { false } // this might break validating children
  phoneNumber: PhoneNumber;
  updateProfile: Boolean;
}

type UserRoles {
  read() { isCurrentUser(uid) }
}

type PhoneNumber extends String {
  write() { isCurrentUser(uid) }
}

type Temperature extends String {
  validate() { this == 'Hot' || this == 'Iced' }
}

isAuthenticated() { auth != null }
isCurrentUser(uid) { auth != null && auth.uid == uid }
